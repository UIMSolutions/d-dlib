/*
Copyright (c) 2019-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Copyright: Timur Gafarov 2019-2025.
 * License: $(LINK2 boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dlib.concurrency.taskqueue;

import dlib.core.mutex;
import dlib.container.array;
import dlib.concurrency.workerthread;

/**
 * State of a Task
 */
enum TaskState
{
    Valid = 0,
    Invalid = 1
}

/**
 * Task object that encapsulates a delegate
 */
struct Task
{
    TaskState state = TaskState.Invalid;
    void delegate() func;

    void run()
    {
        if (func !is null)
        {
            func();
        }
    }
}

/**
 * Asynchronous task queue
 */
class TaskQueue
{
    protected:
    enum size_t MaxTasks = 64;
    Array!(Task, MaxTasks) tasks;
    Mutex mutex;

    public:
    
    /// Constructor
    this()
    {
        mutex.init();
    }

    ~this()
    {
        tasks.free();
        mutex.destroy();
    }

    /// Number of queued tasks
    size_t count()
    {
        return tasks.length;
    }

    /// Add a task to queue
    bool enqueue(Task task)
    {
        if (tasks.length < MaxTasks)
        {
            mutex.lock();
            tasks.insertFront(task);
            mutex.unlock();
            return true;
        }
        else
            return false;
    }

    /// Remove a task from queue
    Task dequeue()
    {
        if (tasks.length)
        {
            mutex.lock();
            Task t = tasks[tasks.length-1];
            tasks.removeBack(1);
            mutex.unlock();
            return t;
        }
        else
            return Task(TaskState.Invalid, null);
    }
}

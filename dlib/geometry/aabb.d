/*
Copyright (c) 2011-2025 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Copyright: Timur Gafarov 2011-2025.
 * License: $(LINK2 boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dlib.geometry.aabb;

import std.math;
import std.algorithm;
import dlib.math.vector;
import dlib.geometry.sphere;
import dlib.geometry.intersection;

/// Axis-aligned bounding box
struct AABB
{
    Vector3f center;
    Vector3f size;
    Vector3f pmin, pmax;

    this(Vector3f newPosition, Vector3f newSize)
    {
        center = newPosition;
        size = newSize;

        pmin = center - size;
        pmax = center + size;
    }

    @property float topHeight()
    {
        return (center.y + size.y);
    }

    @property float bottomHeight()
    {
        return (center.y - size.y);
    }

    Vector3f closestPoint(Vector3f point)
    {
        Vector3f closest;
        closest.x = (point.x < pmin.x)? pmin.x : ((point.x > pmax.x)? pmax.x : point.x);
        closest.y = (point.y < pmin.y)? pmin.y : ((point.y > pmax.y)? pmax.y : point.y);
        closest.z = (point.z < pmin.z)? pmin.z : ((point.z > pmax.z)? pmax.z : point.z);
        return closest;
    }

    bool containsPoint(Vector3f point)
    {
        return !(point.x < pmin.x || point.x > pmax.x ||
                 point.y < pmin.y || point.y > pmax.y ||
                 point.z < pmin.z || point.z > pmax.z);
    }

    bool intersectsAABB(AABB b)
    {
        Vector3f t = b.center - center;
        return fabs(t.x) <= (size.x + b.size.x) &&
               fabs(t.y) <= (size.y + b.size.y) &&
               fabs(t.z) <= (size.z + b.size.z);
    }

    deprecated("use dlib.geometry.intersection.intrSphereVsAABB instead")
    bool intersectsSphere(
        Sphere sphere,
        out Vector3f collisionNormal,
        out float penetrationDepth)
    {
        Intersection intr = intrSphereVsAABB(sphere, this);
        collisionNormal = -intr.normal;
        penetrationDepth = intr.penetrationDepth;
        return intr.fact;
    }

    private bool intersectsRaySlab(
        float slabmin,
        float slabmax,
        float raystart,
        float rayend,
        ref float tbenter,
        ref float tbexit)
    {
        float raydir = rayend - raystart;

        if (fabs(raydir) < 1.0e-9f)
        {
            if (raystart < slabmin || raystart > slabmax)
                return false;
            else
                return true;
        }

        float tsenter = (slabmin - raystart) / raydir;
        float tsexit = (slabmax - raystart) / raydir;

        if (tsenter > tsexit)
        {
            swap(tsenter, tsexit);
        }

        if (tbenter > tsexit || tsenter > tbexit)
        {
            return false;
        }
        else
        {
            tbenter = max(tbenter, tsenter);
            tbexit = min(tbexit, tsexit);
            return true;
        }
    }

    bool intersectsSegment(
        Vector3f segStart,
        Vector3f segEnd,
        ref float intersectionTime)
    {
        float tenter = 0.0f, texit = 1.0f;

        if (!intersectsRaySlab(pmin.x, pmax.x, segStart.x, segEnd.x, tenter, texit))
            return false;

        if (!intersectsRaySlab(pmin.y, pmax.y, segStart.y, segEnd.y, tenter, texit))
            return false;

        if (!intersectsRaySlab(pmin.z, pmax.z, segStart.z, segEnd.z, tenter, texit))
            return false;

        intersectionTime = tenter;

        return true;
    }
}

///
unittest
{
    import dlib.math.utils;
    
    AABB aabb1 = AABB(Vector3f(0, 0, 0), Vector3f(1, 1, 1));
    AABB aabb2 = AABB(Vector3f(0.5, 0.5, 0.5), Vector3f(1, 1, 1));
    AABB aabb3 = AABB(Vector3f(3, 0, 0), Vector3f(1, 1, 1));
    
    assert(aabb1.containsPoint(Vector3f(0, 0, 0)));
    assert(!aabb3.containsPoint(Vector3f(0, 0, 0)));
    
    assert(aabb1.intersectsAABB(aabb2));
    assert(!aabb1.intersectsAABB(aabb3));
    
    Vector3f segStart = Vector3f(0, 0, 3);
    Vector3f segEnd = Vector3f(0, 0, -3);
    float segLength = distance(segStart, segEnd);
    float t;
    assert(aabb1.intersectsSegment(Vector3f(0, 0, 3), Vector3f(0, 0, -3), t));
    assert(isConsiderZero(t * segLength - 2.0f));
    
    assert(!aabb1.intersectsSegment(Vector3f(5, 0, 3), Vector3f(5, 0, -3), t));
}

/// Creates AABB from minimum and maximum points
AABB boxFromMinMaxPoints(Vector3f mi, Vector3f ma)
{
    AABB box;
    box.pmin = mi;
    box.pmax = ma;
    box.center = (box.pmax + box.pmin) * 0.5f;
    box.size = box.pmax - box.center;
    box.size.x = abs(box.size.x);
    box.size.y = abs(box.size.y);
    box.size.z = abs(box.size.z);
    return box;
}

///
unittest
{
    import dlib.math.utils;
    
    Vector3f pmin = Vector3f(-1, -1, -1);
    Vector3f pmax = Vector3f(1, 1, 1);
    AABB aabb = boxFromMinMaxPoints(pmin, pmax);
    
    assert(isAlmostZero(aabb.center));
    assert(isAlmostZero(aabb.size - Vector3f(1, 1, 1)));
    assert(isAlmostZero(aabb.pmin - pmin));
    assert(isAlmostZero(aabb.pmax - pmax));
    assert(isConsiderZero(aabb.topHeight - 1.0f));
    assert(isConsiderZero(aabb.bottomHeight + 1.0f));
    assert(isAlmostZero(aabb.closestPoint(Vector3f(2.0f, 0.0f, 0.0f)) - Vector3f(1.0f, 0.0f, 0.0f)));
}

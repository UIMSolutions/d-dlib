/*
Copyright (c) 2011-2023 Timur Gafarov, Oleg Baharev

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * Detect edges on an image
 *
 * Copyright: Timur Gafarov 2011-2023.
 * License: $(LINK2 boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dlib.image.filters.edgedetect;

import std.math;
import dlib.math.vector;
import dlib.image.image;
import dlib.image.color;
import dlib.image.arithmetics;
import dlib.image.filters.contrast;
import dlib.image.filters.boxblur;
import dlib.image.filters.morphology;
import dlib.image.filters.convolution;

/// Difference of Gaussians
SuperImage edgeDetectDoG(SuperImage src, SuperImage outp, int radius1, int radius2, float amount, bool inv = true)
{
    if (outp is null)
        outp = src.dup;

    auto blurred1 = boxBlur(src, outp, radius1);
    SuperImage outp2 = outp.dup;
    auto blurred2 = boxBlur(src, outp2, radius2);

    auto mask = subtract(blurred1, blurred2, outp, 1.0f);
    outp2.free();
    auto highcon = contrast(mask, mask, amount, ContrastMethod.AverageImage);

    if (inv)
        return invert(highcon, highcon);
    else
        return highcon;
}

/// ditto
SuperImage edgeDetectDoG(SuperImage src, int radius1, int radius2, float amount, bool inv = true)
{
    return edgeDetectDoG(src, null, radius1, radius2, amount, inv);
}

/// Morphologic edge detection
SuperImage edgeDetectGradient(SuperImage src, SuperImage outp)
{
    if (outp is null)
        outp = src.dup;

    return gradient(src, outp);
}

/// ditto
SuperImage edgeDetectGradient(SuperImage src)
{
    return edgeDetectGradient(src, null);
}

/// Laplace edge detection
SuperImage edgeDetectLaplace(SuperImage src, SuperImage outp)
{
    if (outp is null)
        outp = src.dup;

    return convolve(src, outp, Kernel.Laplace, 3, 3, 1.0f, 0.0f, false);
}

/// ditto
SuperImage edgeDetectLaplace(SuperImage src)
{
    return edgeDetectLaplace(src, null);
}

/// Sobel edge detection
SuperImage edgeDetectSobel(SuperImage src, SuperImage outp, float normFactor = 1.0f / 8.0f)
{
    if (outp is null)
        outp = src.dup;
    
    enum float[3][3] sobelHorizontal = [
        [-1,  0,  1],
        [-2,  0,  2],
        [-1,  0,  1],
    ];
    
    enum float[3][3] sobelVertical = [
        [-1, -2, -1],
        [ 0,  0,  0],
        [ 1,  2,  1],
    ];
    
    foreach(window, x, y; src.windows(3, 3))
    {
        Color4f hor = Color4f(0, 0, 0);
        Color4f ver = Color4f(0, 0, 0);
        foreach(ref Color4f pixel, x, y; window)
        {
            hor += pixel * sobelHorizontal[y][x];
            ver += pixel * sobelVertical[y][x];
        }
        
        float magnitude = sqrt(hor.xyz.lengthsqr + ver.xyz.lengthsqr) * normFactor;
        Color4f res = Color4f(magnitude, magnitude, magnitude, 1.0f);
        res.a = 1.0f;
        outp[x, y] = res;
    }
    
    return outp;
}

/// ditto
SuperImage edgeDetectSobel(SuperImage src, float normFactor = 1.0f / 8.0f)
{
    return edgeDetectSobel(src, null, normFactor);
}

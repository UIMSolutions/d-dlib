/*
Copyright (c) 2014-2023 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/**
 * High dynamic range images
 *
 * Copyright: Timur Gafarov 2013-2023.
 * License: $(LINK2 boost.org/LICENSE_1_0.txt, Boost License 1.0).
 * Authors: Timur Gafarov
 */
module dlib.image.hdri;

import core.stdc.string;
import std.math;
import dlib.core.memory;
import dlib.image.image;
import dlib.image.color;
import dlib.math.vector;
import dlib.math.utils;

/// Linear floating-point pixel formats
enum FloatPixelFormat: uint
{
    RGBAF32 = 8
    //TODO:
    //RGBAF64 = 9
    //RGBAF16 = 10
}

/**
 * HDR image interface
 */
abstract class SuperHDRImage: SuperImage
{
    override @property uint pixelFormat()
    {
        return FloatPixelFormat.RGBAF32;
    }
}

/**
 * Extension of standard Image that is based on FloatPixelFormat.RGBAF32
 */
class HDRImage: SuperHDRImage
{
    public:

    @property uint width()
    {
        return _width;
    }

    @property uint height()
    {
        return _height;
    }

    @property uint bitDepth()
    {
        return _bitDepth;
    }

    @property uint channels()
    {
        return _channels;
    }

    @property uint pixelSize()
    {
        return _pixelSize;
    }

    @property ubyte[] data()
    {
        return _data;
    }

    @property SuperImage dup()
    {
        auto res = new HDRImage(_width, _height);
        res.data[] = data[];
        return res;
    }

    SuperImage createSameFormat(uint w, uint h)
    {
        return new HDRImage(w, h);
    }

    this(uint w, uint h)
    {
        _width = w;
        _height = h;
        _bitDepth = 32;
        _channels = 4;
        _pixelSize = (_bitDepth / 8) * _channels;
        allocateData();
    }

    Color4f opIndex(int x, int y)
    {
        while(x >= _width) x = _width-1;
        while(y >= _height) y = _height-1;
        while(x < 0) x = 0;
        while(y < 0) y = 0;

        float r, g, b, a;
        auto dataptr = data.ptr + (y * _width + x) * _pixelSize;
        memcpy(&r, dataptr, 4);
        memcpy(&g, dataptr + 4, 4);
        memcpy(&b, dataptr + 4 * 2, 4);
        memcpy(&a, dataptr + 4 * 3, 4);
        return Color4f(r, g, b, a);
    }

    Color4f opIndexAssign(Color4f c, int x, int y)
    {
        while(x >= _width) x = _width-1;
        while(y >= _height) y = _height-1;
        while(x < 0) x = 0;
        while(y < 0) y = 0;

        auto dataptr = data.ptr + (y * _width + x) * _pixelSize;
        memcpy(dataptr, &c.arrayof[0], 4);
        memcpy(dataptr + 4, &c.arrayof[1], 4);
        memcpy(dataptr + 4 * 2, &c.arrayof[2], 4);
        memcpy(dataptr + 4 * 3, &c.arrayof[3], 4);

        return c;
    }

    protected void allocateData()
    {
        _data = new ubyte[_width * _height * _pixelSize];
    }

    void free()
    {
        // Do nothing, let GC delete the object
    }

    protected:

    uint _width;
    uint _height;
    uint _bitDepth;
    uint _channels;
    uint _pixelSize;
    ubyte[] _data;
}

/// Clamp pixels luminance to a specified range
SuperImage clamp(SuperImage img, float minv, float maxv)
{
    foreach(x; 0..img.width)
    foreach(y; 0..img.height)
    {
        img[x, y] = img[x, y].clamped(minv, maxv);
    }

    return img;
}

/**
 * Factory interface for HDR images
 */
interface SuperHDRImageFactory
{
    SuperHDRImage createImage(uint w, uint h);
}

/**
 * Factory class for HDR images
 */
class HDRImageFactory: SuperHDRImageFactory
{
    SuperHDRImage createImage(uint w, uint h)
    {
        return new HDRImage(w, h);
    }
}

private SuperHDRImageFactory _defaultHDRImageFactory;

/**
 * Get default SuperHDRImageFactory singleton
 */
SuperHDRImageFactory defaultHDRImageFactory()
{
    if (!_defaultHDRImageFactory)
        _defaultHDRImageFactory = new HDRImageFactory();
    return _defaultHDRImageFactory;
}

/**
 * HDRImage that uses dlib.core.memory instead of GC
 */
class UnmanagedHDRImage: HDRImage
{
    override @property SuperImage dup()
    {
        auto res = New!(UnmanagedHDRImage)(_width, _height);
        res.data[] = data[];
        return res;
    }

    override SuperImage createSameFormat(uint w, uint h)
    {
        return New!(UnmanagedHDRImage)(w, h);
    }

    this(uint w, uint h)
    {
        super(w, h);
    }

    ~this()
    {
        Delete(_data);
    }

    protected override void allocateData()
    {
        _data = New!(ubyte[])(_width * _height * _pixelSize);
    }

    override void free()
    {
        Delete(this);
    }
}

/**
 * Factory class for UnmanagedHDRImageFactory
 */
class UnmanagedHDRImageFactory: SuperHDRImageFactory
{
    SuperHDRImage createImage(uint w, uint h)
    {
        return New!UnmanagedHDRImage(w, h);
    }
}

/// Simple exponentiation tonal compression
SuperImage hdrTonemapGamma(SuperHDRImage img, SuperImage output, float gamma)
{
    SuperImage res;
    if (output)
        res = output;
    else
        res = image(img.width, img.height, img.channels);

    foreach(y; 0..img.height)
    foreach(x; 0..img.width)
    {
        Color4f c = img[x, y];
        float r = c.r ^^ gamma;
        float g = c.g ^^ gamma;
        float b = c.b ^^ gamma;
        res[x, y] = Color4f(r, g, b, c.a);
    }

    return res;
}

/// ditto
SuperImage hdrTonemapGamma(SuperHDRImage img, float gamma)
{
    return hdrTonemapGamma(img, null, gamma);
}

/// Reinhard tonal compression
SuperImage hdrTonemapReinhard(SuperHDRImage img, SuperImage output, float exposure, float gamma)
{
    SuperImage res;
    if (output)
        res = output;
    else
        res = image(img.width, img.height, img.channels);

    foreach(y; 0..img.height)
    foreach(x; 0..img.width)
    {
        Color4f c = img[x, y];
        Vector3f v = c * exposure;
        v = v / (v + 1.0f);
        float r = v.r ^^ gamma;
        float g = v.g ^^ gamma;
        float b = v.b ^^ gamma;
        res[x, y] = Color4f(r, g, b, c.a);
    }

    return res;
}

/// ditto
SuperImage hdrTonemapReinhard(SuperHDRImage img, float exposure, float gamma)
{
    return hdrTonemapReinhard(img, null, exposure, gamma);
}

/// Hable (Uncharted 2) tonal compression
SuperImage hdrTonemapHable(SuperHDRImage img, SuperImage output, float exposure, float gamma)
{
    SuperImage res;
    if (output)
        res = output;
    else
        res = image(img.width, img.height, img.channels);

    foreach(y; 0..img.height)
    foreach(x; 0..img.width)
    {
        Color4f c = img[x, y];
        Vector3f v = c * exposure;
        Vector3f one = Vector3f(1.0f, 1.0f, 1.0f);
        Vector3f W = Vector3f(11.2f, 11.2f, 11.2f);
        v = hableFunc(v * 2.0f) * (one / hableFunc(W));
        float r = v.r ^^ gamma;
        float g = v.g ^^ gamma;
        float b = v.b ^^ gamma;
        res[x, y] = Color4f(r, g, b, c.a);
    }

    return res;
}

/// ditto
SuperImage hdrTonemapHable(SuperHDRImage img, float exposure, float gamma)
{
    return hdrTonemapHable(img, null, exposure, gamma);
}

Vector3f hableFunc(Vector3f x)
{
   return ((x * (x * 0.15f + 0.1f * 0.5f) + 0.2f * 0.02f) / (x * (x * 0.15f + 0.5f) + 0.2f * 0.3f)) - 0.02f / 0.3f;
}

/// ACES curve tonal compression
SuperImage hdrTonemapACES(SuperHDRImage img, SuperImage output, float exposure, float gamma)
{
    SuperImage res;
    if (output)
        res = output;
    else
        res = image(img.width, img.height, img.channels);

    float a = 2.51;
    float b = 0.03;
    float c = 2.43;
    float d = 0.59;
    float e = 0.14;

    foreach(y; 0..img.height)
    foreach(x; 0..img.width)
    {
        Color4f col = img[x, y];
        Color4f v = col * exposure * 0.6;
        v = ((v * (v * a + b)) / (v * (v * c + d) + e)).clamped(0.0, 1.0);
        res[x, y] = Color4f(
            v.r ^^ gamma, 
            v.g ^^ gamma, 
            v.b ^^ gamma, 
            col.a);
    }

    return res;
}

/// ditto
SuperImage hdrTonemapACES(SuperHDRImage img, float exposure, float gamma)
{
    return hdrTonemapACES(img, null, exposure, gamma);
}

/// Average luminance tonal compression
SuperImage hdrTonemapAverageLuminance(SuperHDRImage img, SuperImage output, float a, float gamma)
{
    SuperImage res;
    if (output)
        res = output;
    else
        res = image(img.width, img.height, img.channels);

    float lumAverage = averageLuminance(img);
    float aOverLumAverage = a / lumAverage;

    foreach(y; 0..img.height)
    foreach(x; 0..img.width)
    {
        auto col = img[x, y];
        float Lw = col.luminance;
        float L = Lw * aOverLumAverage;
        float Ld = L / (1.0f + L);
        Color4f nRGB = col / Lw;
        Color4f dRGB = nRGB * Ld;
        float r = dRGB.r ^^ gamma;
        float g = dRGB.g ^^ gamma;
        float b = dRGB.b ^^ gamma;
        res[x, y] = Color4f(r, g, b, col.a);
    }

    return res;
}

/// ditto
SuperImage hdrTonemapAverageLuminance(SuperHDRImage img, float a, float gamma)
{
    return hdrTonemapAverageLuminance(img, null, a, gamma);
}

float averageLuminance(SuperHDRImage img)
{
    float sumLuminance = 0.0f;

    foreach(y; 0..img.height)
    foreach(x; 0..img.width)
    {
        sumLuminance += log(EPSILON + img[x, y].luminance);        
    }

    float N = img.width * img.height;
    float lumAverage = exp(sumLuminance / N); 
    return lumAverage;
}
